// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import { WorldcoinAggregationV1Helper, WorldcoinAggregationV1Exposed } from "./helpers/WorldcoinAggregationV1Helper.sol";
import { IERC20 } from "../src/interfaces/IERC20.sol";
import { WorldcoinAggregationV1 } from "../src/WorldcoinAggregationV1.sol";
import { IGrant } from "../src/interfaces/IGrant.sol";

import { Vm } from "forge-std/Vm.sol";

contract WorldcoinAggregationV1_Test is WorldcoinAggregationV1Helper {
    function test_simpleExample() public {
        vm.recordLogs();
        aggregation.distributeGrants({
            proof: PROOF,
            vkeyHash: vkeyHash,
            numClaims: numClaims,
            root: root,
            grantIds: grantIds,
            receivers: _receivers,
            _nullifierHashes: _nullifierHashes
        });

        // /// An Ethereum log. Returned by `getRecordedLogs`.
        // struct Log {
        //     // The topics of the log, including the signature, if any.
        //     bytes32[] topics;
        //     // The raw data of the log.
        //     bytes data;
        //     // The address of the log's emitter.
        //     address emitter;
        // }
        Vm.Log[] memory logs = vm.getRecordedLogs();

        uint256 _numClaims = 0;
        for (uint256 i = 0; i != logs.length; ++i) {
            if (logs[i].topics[0] != keccak256("GrantClaimed(uint256,address)")) continue;

            uint256 grantId = uint256(logs[i].topics[1]);
            address receiver = _toAddress(logs[i].topics[2]);

            assertEq(grantId, 30, "grantId mismatch");
            assertEq(receiver, _receivers[_numClaims], "receiver mismatch");
            assertEq(logs[i].emitter, address(aggregation), "emitter mismatch");
            assertEq(aggregation.nullifierHashes(_nullifierHashes[_numClaims]), true, "nullifierHash should be claimed");

            ++_numClaims;
        }

        assertEq(_numClaims, numClaims, "numClaims mismatch");
    }

    function test_skipClaimedNullifierHashes() public {
        aggregation.distributeGrants({
            proof: PROOF,
            vkeyHash: vkeyHash,
            numClaims: numClaims,
            grantIds: grantIds,
            root: root,
            receivers: _receivers,
            _nullifierHashes: _nullifierHashes
        });

        uint256[] memory balancesBefore = new uint256[](_receivers.length);
        for (uint256 i = 0; i != _receivers.length; ++i) {
            balancesBefore[i] = IERC20(wldToken).balanceOf(_receivers[i]);
        }

        aggregation.distributeGrants({
            proof: PROOF,
            vkeyHash: vkeyHash,
            numClaims: numClaims,
            grantIds: grantIds,
            root: root,
            receivers: _receivers,
            _nullifierHashes: _nullifierHashes
        });

        for (uint256 i = 0; i != _receivers.length; ++i) {
            assertEq(IERC20(wldToken).balanceOf(_receivers[i]), balancesBefore[i], "balance should not increase");
        }
    }

    function testFuzz_toAddress(bytes32 input) public view {
        address expected = address(uint160(uint256(input)));
        assertEq(aggregation.toAddress(input), expected, "toAddress failed");
    }

    function testFuzz_toUint256Array(address[] calldata input) public view {
        uint256[] memory expected = new uint256[](input.length);
        for (uint256 i = 0; i != input.length; ++i) {
            expected[i] = uint256(uint160(input[i]));
        }
        assertEq(aggregation.toUint256Array(input), expected, "toUint256Array failed");
    }

    function testFuzz_unsafeCalldataArrayAccess(uint256[] calldata array, uint256 index) public view {
        vm.assume(array.length != 0);
        index = bound(index, 0, array.length - 1);
        uint256 expected = array[index];
        assertEq(uint256(aggregation.unsafeCalldataArrayAccess(array, index)), expected, "unsafeCalldataAccess failed");
    }

    function testFuzz_unsafeCalldataBytesAccess(bytes calldata array, uint256 index) public view {
        vm.assume(array.length != 0);
        index = bound(index, 0, array.length - 1);
        bytes memory expected = new bytes(32);
        for (uint256 i = 0; i < 32; ++i) {
            if (index + i < array.length) expected[i] = array[index + i];
        }

        assertEq(aggregation.unsafeCalldataBytesAccess(array, index), bytes32(expected), "unsafeCalldataAccess failed");
    }
}

contract WorldcoinAggregationV1_ConstructionTest is WorldcoinAggregationV1Helper {
    function test_construction() public {
        vm.expectRevert(WorldcoinAggregationV1.InvalidMaxNumClaims.selector);
        new WorldcoinAggregationV1Exposed({
            vkeyHash: bytes32(0x46e72119ce99272ddff09e0780b472fdc612ca799c245eea223b27e57a5f9cec),
            maxNumClaims: 5,
            wldToken: wldToken,
            // Identity Manager
            rootValidator: rootValidator,
            grant: address(mockGrant),
            verifierAddress: verifier,
            prover: address(0)
        });

        new WorldcoinAggregationV1Exposed({
            vkeyHash: bytes32(0x46e72119ce99272ddff09e0780b472fdc612ca799c245eea223b27e57a5f9cec),
            maxNumClaims: 4,
            wldToken: wldToken,
            // Identity Manager
            rootValidator: rootValidator,
            grant: address(mockGrant),
            verifierAddress: verifier,
            prover: address(0)
        });
    }
}

contract WorldcoinAggregationV1_RevertTest is WorldcoinAggregationV1Helper {
    function test_RevertWhen_receiversAndNullifierHashesLengthMismatch() public {
        uint256[] memory nHashes = new uint256[](1);

        vm.expectRevert(WorldcoinAggregationV1.InvalidProof.selector);
        aggregation.distributeGrants({
            proof: PROOF,
            vkeyHash: vkeyHash,
            numClaims: numClaims,
            grantIds: grantIds,
            root: root,
            receivers: _receivers,
            _nullifierHashes: nHashes
        });
    }

    function test_RevertWhen_grantIdsLengthMismatch() public {
        uint256[] memory invalidGrantIds = new uint256[](1);

        vm.expectRevert(WorldcoinAggregationV1.InvalidProof.selector);
        aggregation.distributeGrants({
            proof: PROOF,
            vkeyHash: vkeyHash,
            numClaims: numClaims,
            grantIds: invalidGrantIds,
            root: root,
            receivers: _receivers,
            _nullifierHashes: _nullifierHashes
        });
    }

    function test_RevertWhen_NumClaimsLengthMismatch() public {
        vm.expectRevert(WorldcoinAggregationV1.InvalidProof.selector);
        aggregation.distributeGrants({
            proof: PROOF,
            vkeyHash: vkeyHash,
            numClaims: 0,
            grantIds: grantIds,
            root: root,
            receivers: _receivers,
            _nullifierHashes: _nullifierHashes
        });
    }

    function test_RevertWhen_proofTooShort() public {
        bytes memory invalidProof = new bytes(1);

        vm.expectRevert(WorldcoinAggregationV1.InvalidProof.selector);
        aggregation.distributeGrants({
            proof: invalidProof,
            vkeyHash: vkeyHash,
            numClaims: numClaims,
            grantIds: grantIds,
            root: root,
            receivers: _receivers,
            _nullifierHashes: _nullifierHashes
        });
    }

    function test_RevertWhen_invalidVkeyHash() public {
        vm.expectRevert(WorldcoinAggregationV1.InvalidVkeyHash.selector);
        aggregation.distributeGrants({
            proof: PROOF,
            vkeyHash: 0x00,
            numClaims: numClaims,
            grantIds: grantIds,
            root: root,
            receivers: _receivers,
            _nullifierHashes: _nullifierHashes
        });
    }

    function test_RevertWhen_invalidGrantId() public {
        uint256[] memory invalidGrantIds = new uint256[](2);
        invalidGrantIds[0] =
            8_029_035_399_783_488_375_899_835_639_364_288_634_898_513_630_175_561_257_042_404_987_377_710_032_240;
        invalidGrantIds[1] =
            5_403_619_663_232_963_001_011_610_991_508_510_419_774_922_146_187_243_787_483_758_039_652_560_549_241;

        _receivers[0] = 0x2D8E140fC684da3c72031ceE762aE4909bea23b0;
        _receivers[1] = 0x98d08B9d22bA854047c2BE6D634FbA4D590f8291;

        _nullifierHashes[0] =
            15_383_854_785_718_614_412_669_607_369_679_614_406_953_094_636_518_731_193_730_210_286_990_387_586_663;
        _nullifierHashes[1] =
            17_095_298_643_485_885_059_042_403_787_966_383_768_755_678_600_444_725_034_151_755_708_096_610_434_665;

        root = 6_463_913_941_657_938_800_665_904_202_297_501_548_778_516_925_856_424_426_851_725_740_556_394_554_557;

        vm.store(rootValidator, 0x000000000000000000000000000000000000000000000000000000000000012e, bytes32(root));

        vm.expectRevert(IGrant.InvalidGrant.selector);
        aggregation.distributeGrants({
            proof: INVALID_GRANT_ID_PROOF,
            vkeyHash: vkeyHash,
            numClaims: numClaims,
            grantIds: invalidGrantIds,
            root: root,
            receivers: _receivers,
            _nullifierHashes: _nullifierHashes
        });
    }

    function test_RevertWhen_invalidRoot() public {
        vm.expectRevert();
        aggregation.distributeGrants({
            proof: PROOF,
            vkeyHash: vkeyHash,
            numClaims: numClaims,
            grantIds: grantIds,
            root: 0x00,
            receivers: _receivers,
            _nullifierHashes: _nullifierHashes
        });
    }

    function test_RevertWhen_insufficientBalance() public {
        vm.stopPrank();
        IERC20 _wldToken = IERC20(wldToken);

        vm.startPrank(address(aggregation));
        _wldToken.transfer(address(this), _wldToken.balanceOf(address(aggregation)));
        vm.stopPrank();

        vm.expectRevert();
        aggregation.distributeGrants({
            proof: PROOF,
            vkeyHash: vkeyHash,
            numClaims: numClaims,
            grantIds: grantIds,
            root: root,
            receivers: _receivers,
            _nullifierHashes: _nullifierHashes
        });
    }

    function test_RevertWhen_tooManyClaims() public {
        address[] memory invalidReceivers = new address[](256);
        uint256[] memory invalidNullifierHashes = new uint256[](256);
        uint256[] memory _grantIds = new uint256[](256);
        for (uint256 i = 0; i != 256; ++i) {
            _grantIds[i] = 30;
        }

        vm.expectRevert(WorldcoinAggregationV1.TooManyClaims.selector);
        aggregation.distributeGrants({
            proof: PROOF,
            vkeyHash: vkeyHash,
            numClaims: 256,
            grantIds: _grantIds,
            root: root,
            receivers: invalidReceivers,
            _nullifierHashes: invalidNullifierHashes
        });
    }

    function test_RevertWhen_OutputHashMismatch() public {
        bytes memory invalidProof = PROOF;
        invalidProof[(13 << 5) - 1] = 0x00;

        vm.expectRevert(WorldcoinAggregationV1.InvalidProof.selector);
        aggregation.distributeGrants({
            proof: invalidProof,
            vkeyHash: vkeyHash,
            numClaims: numClaims,
            grantIds: grantIds,
            root: root,
            receivers: _receivers,
            _nullifierHashes: _nullifierHashes
        });
    }

    function test_RevertWhen_InvalidSnark() public {
        bytes memory invalidProof = PROOF;
        // Zero out the last byte of the proof
        invalidProof[PROOF.length - 1] = 0x00;

        vm.expectRevert(WorldcoinAggregationV1.InvalidProof.selector);
        aggregation.distributeGrants({
            proof: invalidProof,
            vkeyHash: vkeyHash,
            numClaims: numClaims,
            grantIds: grantIds,
            root: root,
            receivers: _receivers,
            _nullifierHashes: _nullifierHashes
        });
    }

    function test_RevertWhen_doubleClaiming() public {
        aggregation.distributeGrants({
            proof: PROOF,
            vkeyHash: vkeyHash,
            numClaims: numClaims,
            grantIds: grantIds,
            root: root,
            receivers: _receivers,
            _nullifierHashes: _nullifierHashes
        });

        vm.expectRevert(WorldcoinAggregationV1.NullifierHashAlreadyUsed.selector);
        aggregation.distributeGrants({
            proof: PROOF,
            vkeyHash: vkeyHash,
            numClaims: numClaims,
            grantIds: grantIds,
            root: root,
            receivers: _receivers,
            _nullifierHashes: _nullifierHashes
        });
    }
}

bytes constant INVALID_GRANT_ID_PROOF =
    hex"00000000000000000000000000000000000000000062b50f630536a22c617a710000000000000000000000000000000000000000002d3064b4214a6bf05bace6000000000000000000000000000000000000000000000680bbd7b59c99574da6000000000000000000000000000000000000000000c9e2839767d0f1cedd964c0000000000000000000000000000000000000000007b70769adb8fa5bde9c14f000000000000000000000000000000000000000000002a369a7fc040df1058d1000000000000000000000000000000000000000000bac5d73752aac094e41836000000000000000000000000000000000000000000e098a1bd3b7dfdfad9d4bf0000000000000000000000000000000000000000000000e8613bddbb2aa32cd20000000000000000000000000000000000000000000b5c31cecac9f5899ebb470000000000000000000000000000000000000000009877ca985cfa0919bb2284000000000000000000000000000000000000000000001d1fe331d90d5226ec9200000000000000000000000000000000ff3fff9e64274f84b3751919cac3ec3100000000000000000000000000000000fc388404dfb58cf8affd968ac95ad1b70b9fb62f7dc32cae830fe690436ef4843161c5734db0054caf709c9fc9d199020fac9cc37a6aab419ca557ccf2c115d7298935d5099607c96b476cbf9d16fc1b03366322f5f8801434f984125316a4a5bad12e97335e28f6b021973d84c4811e2d6ef29479f79489abddbe2b3487193c1a5b719abef53823c18002cd862d07471fa8042101278ee60e445e708b1f944124663aa241e9dd5e40640f74833294fe28273178373f18e447a9f06d5731ab858b60ec9317787cb36b3a7a87477c2c002f5788734ff3f0d8c7e708be447a0c9389e7d4e89653ee8dd897ce01c8896cf72516ea1cc5416ff6d82f63f670c604667c45902eb68f8cb7ba4ed7d5cd512aa0038753b184d40d7665ca1098b5dbf4ca6268dca6a7c11fe999fa648de50657d409ec50b3b255ecedc36f88fce9eef85f40332abf1e7ad67df9fd0ec18ce75bb5261f1e8d72d0c1f3ed956614cd8f5ccaa409abec455e105b35d07afcb8cbc96919bd1de43de48c652271e0259477072e9f267db4485e1cd393eb53482d96f01c091a772dcc2639afc69b76d857045bedc9a0e12107f11f678aac1b0215051590011df59da0e448aa468c9a200946d341a9769d793766acc3a7ea56be887954960da75c552683bbd64efde7d3caa62f72061d44f51b68417ccf41e4eee67d110d0e7ec51788825429c80f85e27529d1d538dfc6039f1fc4cc3889c85cc838e7c915bfe5501d2273b9316e39c8c79ea8ef3bc01001e60cd56bc34199b24606d60313f72a0c019b616e4d98a3cf42dfaa4c0b4e4035e4366e1d1c14435ac356f0300f1e3757a5493c4780037d01fda4f358f31a14e496e35f224b44427b1f488beb271b2347c73714d3cb992adcec57e85f7aca9715fbcbdd9264dcac5ae2cb659601c0a917cf4303896e4fddac58ee78e51254735877cf9c36707d2664950053733045f8ef942fdf11846cdcdb7a9f90ba0879a1fd220f4d55a592be957c29b4b31b80fa727761dd9216436fc2d8d0704213ce79f0c70275ba209177c9d59153cc19bc187b1f46e4d12d37f4ef99f1ba85faecf1cc20c5ffdfedeaf594d989f3a312df9fd50e4a7cd4b8e06cc5cc29e4c0c13e304b659b4f07b1fcc2ffdc5b41ef09357a48c9ec9eae1ad8d37c6b9fe41bacadec479cd715141fef89f06a984dc918e74a5f10f1758d5ba5a503c99b4314e7cb34a07b1a76b59d5a829e64a5249e145d508b4f3890753cf0dc2c35c6a8c014b3f80015b09a63a7ea5cf088e30887060c392713e035262356cd5a613969970ba17b47339623efc9dbf4b7468d9584032da2d94516c4d786a989d88961b7dd3560a939a89a3f9eeaf812817c6dce370992b3f2baacceb49b52b84616ee87fe0dddb0a30a6b0558894dc74508d7a42b0c564e2b4315eaf2c5bb8240ec4bbd2cdfd3b46fc176930be9586b1e4599ddc5257d33913b0d71d10c2abc2da73eed94cfacac16c3e8c6affa7cebec3ad4254821cec9764d0852895677f8129411a289e3faf400331518c1b68f0af51b7f8e87085c8d16c6cd554190c59c6fe6b2e791fb6c68172b8607f1096ecedcb108bc2e093a66f7a0b5c0a002211ec8464bad82339844b78445566cbdb6879e6ad39833058b79457ce63b2551559b03ccb3662092fa7e94dcb7aa8a29f2dcb6f40fcaf22632e0bcc53a670d5a3dbb9f0a53443cfd1b1d7e810fbd3f4de32b4841ec76382abf0940d6122b39c2b67d0ac9e3e6ff950e38d0d750f33220e05bd591d6b3722b1cc757f54d20377125c29d68fbefadd0a455dcc33d7015ff4fbca36cec9952110e250886df71cc04c566968f2701ffd223b56c175d4a9ebb5ba11aa1819c9e245fed7a1ead2fdfb7f9d08bb4f457557d27552d5776837eee6a6b8a83780bfc00847bb35811731a2457bf2a3d6d6f645a9a0de32f5ea0941a1badeda91544010022d1c3a118f31f635cfd7d49ff1af4d452f3081c1647baa50594897f7b3d8a1af31b63bd790cedfeb482176442720de56432b69ed9274ec5f3d4c175b079612c55db440c262ffdaafaf5833353a50b60cc760ae3849f4282402e54ff312237182bca4b5b85f7be7faa70ef76444b37049b3119ff08119e29ded744f70b41a71609bbb3eee5df6056e0e93e9dd5ec62dc85936c19639e49aaf8748ab952725c016cee4a22b3fc1e1504385c3efae75c669ad165dadeade39ea731b310a3478e2c9155b4c4da63d8015f1744a244053fd7b6908a8f5297d1c893989685cdaacc2568e7ad4ab5a8d1cf881be255beefa0b0de9c2dc1208c59a332aa41797243d41c357bb131d30ec6d4305eeb93b26e668eb1264f4427f87867a54c90d364377c0d4d763c4d1a2df4f2f418697582c49bbe7465c31067fd3d62afa5a8c0e3cc12004e3522371d4777300fd346005cfa5ab37c688af6927b5a02a6e4b84c909ea3042cba9fc9778d4d9d49f24e31e7c5bb31e7d1a6c88f10a8aa65c3c2678965631b8269d10a11457da6961668e34256e8c0eeef2a4641fb603b17b9e08e764ab029992a1cddaa1c85141b57417272d594c86dcba0975229abea5f6380df95942910b8598482720c152805a78d84847d3316768e6a2f0401b8a0f299b44a158d921df622a0af98faa3253a69d32c423ffb72a148bac134620dc4d3290344ca89ef1ce58e9849681d444c40cdef406875d9a34e336d074e0561ccdb194a47f0fa192546657d382a73fb5711e386f18cad08ff11a578a1448cee86c9946e9be7247803e4984f7d80aa76a40d27f62b4002a6b5352e4ebcdebcf143a31458dee867782595789b88ec7cc77584b92c039292ccb51aff247f8d48df6178e23cd3224e1b01c186c26a1b01d21daf794dfc4d1ae611aa15c3ca2000c239c5bf38744961c42d93075290cd45b837140248e22d9250fd3c8e19196f25bfb3d70aa5ec7566900a71be26e236227392acd4cf8f0ed46154bb90869e00eec4ea266bef9a8759292ba490e4226b0579a62f364a164cf30a40e24f24eb0231a96d417c76108c8b8110ca48a5fa31cf39c275917160b8252ddc7b90d3faa29d92cd941addfa8cd6110c4be9c56f7fbc174edb67767f91c25262e655c9ac550cb4f1e54ac51c479e5f17f3a5a47d6966f8f40a62e0e893f67787e00fda5421ebcf38940f2e9feb44ab0e91522d07b9902679e97e03c996c9bb02221fdde87ec8b55b3229ff9af929d20dbe696fc3cf94c51f317e9572bedd799689a320c80f4a122a2ada57f93c8e7010649512b9533928a0240c0696b32e468e47dbc3583d5fb753e5e9d8de69251216591e40366bf85349fa654b09bc030b70869d496bb4db62462bdb9480f36b2826cc347d4756ef792d999510533cf0861bf320c04b8a92ac10a3a92de89f6e5a1f9b9da7f08a0b17942056fe8ddccf880c8a9c43883b48562ab8392604fa96d00fe5d10979bc8ea899189b9a9193ebe6a634151f5a2cb03058a70a61f4e857a602f3a6553e156f9ec771b4d7058e9183dda5e90f58167fd6071933f4f28754a922606800e2a1afccccd0e367dac42f38b78d15233629f6d1c471be50a3db3b2f0650d774493c8bd0c857e260228e859e3a8a7470d532f0b9e46df132c27ec2ee2805b871e43a01c2fd219d148fa74cdfc6172b797a9e89178fd01218ba03d104266b56e5656eaebe28ac4a98dc9468728c1a089e919223b3f8b09c6d6e4548e420db5c9454dd66621614aaf6ea3b65c38d784e77b2ebf86dbb53bef00644fb392a919e6b04795372dbb1e20a6ca6e731c8f39b40afb3688e7f8bbb47576b98ef0e8d7be58dba676f7b92ba1587da24240714daf84212c31f8777d3e4ef19572d08f4bdff52190f602777fcde70a275ec1201b9fcb20b9abedfef385a442ce2660c140abf9597c892f6285c5fedebed5cf906383c9093c6409ea7d1ce5be4d48e0dec22a44bc44cb2fd3a70922dd0c6ea6935a4c155e87d8b1c87531126fbb5ff2fe281a5442e6ea11a0320fa5744cdcd3866bbc3ea44839513e07716486dc13a1a7a53b89c6748192a702ed127d86452b276d04ff112df86f8aff0a0f59a98d102486b87d1a7097977ef37fc25a18f04b0ad8542d43b2988bd0a8df04b117f7a1d2912097373a1c0fcdeef0f663d747e47516e844c72f8cec9da26c587b724e62944f5c21d8e811f593f20e454bd9e148d338dccd3dd432acaefcd7961ad21e527bc19875c0b16e33e790d979f557fcb578e9b1fe4817744fecfb8ffe0b315591aa51330ca413c9edbba4e26f1497ec369bc25443318e99071afca4cda4e0b1101b98ba5d37e355574555b7bdd2199300f2e5177068a37dbc7316177bfa98a932df16df7ff6b4ed5e7d34a891709b696d5a18c6954e7a32832761ea1c5800d742ed29ef7b4605fdbdf3626ea3dedd1649b82b811ccfbd8994916969b470b40a319ac25e5d682744f23665daf8cb2fa34da37aaa1c796ea6d3b8805d79bb451c809635aa6dc194cfe496286cea9c3264c05a8fe57ae986efec317340a642ccda916b8e92cb8c74462ac73db78649573b72a885a9ff9e1df8eadfa964fa9a521bd1fd8d248c5025c63cc3a1947de9e4582d34a95384c5ebe722109cbedd3b51db204b3d209775b4b165580fd1f67624bccff5f9ae06f15d56880af1cb28b4e56711d35340ebc076234732968396aced4362770158f94b3a5b8925c01d8a5e814f42d9ee435f9d71804e886b4d3d1176916fdbdd6ab800a50710328be6f41c3dad82b3d7b939d8b1b90fdc5f6c333b4212a9c5e7b512e533b800221ee31bbee52f02a3c70c4c51afa85069743bea6441ebf01875a1673e2f024a00eefd7622fc63b2b45bca807f2eb30ea3a2ad57fce7d618e330da248c545a3aee587b514db94fd08875f3650d6ed96266761912828e7180f48d05e9b00a7d9915793bffd680f310bf1bbddd04274075adca312dd976b2955c07e63329d5ce13ab9b6a12c2af5e322f4d1cbdeb1c4c61b9ea5d442c1e37e54deb84acf53791f6c5fef8c87b058c328b8134eae8ed382a57a8b7f5bf25ec4ff490ff71d1b7d5214bd24ad1ca6af85235fef740fd360612c5d7e4543ec5ce2e3a04d749e1b0cfc130e981ee8ed66d5060652e58f4920be8ad53f85e44cad68daa7107b5aab6f458b74c451d2b83b18162dd2cb03195714f5b2ccc2cffb63709b167483343e481a4ba9b322684a5dc300d9d7920e0269792fab2952612c48240301711fb0a6e9489cb1d1926df6f2270fdfbb45be644557be7a524a0d4e25e3be5640bb3733bbbd553d86c284c2e70f0d1e9093b198b384afe57629fbddb9a0536bbc38b7b438fcbd3f6e555c30520c08a32e593dfe257a176f042133a7398534eb5b8d754db90ae75850b79f5ef7692bfb8afc2b96d7e2d29fd04a1472bd3fa18814e29581990c68cced55f77cdb8a20e4634d32a3723a1284d9d83fee4c0de0ad1e778d17bc4f6ce266b4c001fa332496ca1818ac79e67da27b615ceaff098f51509c2c0bb4cefef0647fd83508de1f02c9631e317461e552beb9396e3a94f310fa322c560c40b22130cc422050482dfebd4ef990ae6f10ce745d3851db393e3d7fe1609e86329a28faa74f032941207fef262211991a70ca4a333000145705e43fdd99848a70ae13561f8b6ec6920b406bd38de613fd9b6b2e8f23d84fe76707e904916afa6d1be367bf1da9d57f2e02225ea6129efbe17640cc6464fbac993d41704118a2896e9f687f300adbf302a4f4663e59a72b64c2c81820e973ce49e7fc7199f0dcf8f6d6a690a58f37cf0a5bf856d49a81c5e2566b99fd01e437471a78960bebc253c78a67d23af851ee09901822a6c3d52e542b29040f848ddb297c235ed03500cacc4213f54964fc540266a05fe072a03b8c84507fdf6912fa6e48c2777933ba12db944de7969dcc972329b9fc4111a0ee4c953afabe137aaecbf63b951c6ef28a126b42d237e911e429411fb5a965b090714e6718380905fb31df852e1979da9d75cc99a95dea3cf8152eefc45e2536204803e3f7643bd72ce359dd751eb547be82a4486c3e1e625d1f8f595434ca8a58322b03dd0b7c9ee9af1157f5edc8d5e63110db49fe5cd7fc23d9ddd3d421d3a3b0fedf6e39d03d38aad9c4b3bdc0fe9a2d01d03eb584a5b40363ceddeb7d1ae38327b4d05f6e4725fd6be4f9d929bee8f3e51bcbdf5621500229461c4e65515f509b4c702d3cf1016385b1db726712c5459621b596ca34672ccb9d407ce8f34ec625e46b46ed64c2d91e39be13742925dd68b29a3d58f45f29a844b7a52153010c2ce505b16aa7a2f43fb9b0d893048424b39db6ec699d172d27ee2580cf27b8737a0cfaf125c386d69a1b1e09566b98b88ec777583b90751dd990f3f5e7b376beab1ea5a0068ef4086eeeb967e9c9837a3fd64e654cda6e237f39db66c32451dd02a5c56d48fb467160d4eca2385b743b5f0ec9ff5016fc2e397d08d83260441783918841d1193391aeea3c28bf1d8c03ae22689ef2c6d013ecc32e957acdf1957c9fa0bd5b0fe804033cdcf986c7ae9b6bec6bb56483170dccd66c38d2371330dfb1132cb4282e9b8a43e07f759daa2c3ee94ed180f40307cf047f72011ee04f6d96e0bdc6b48dd1b087d1eef94571e6ce1bbfffc8c48c05ce30c67bb1682b21e77314c6caa79a02e158d4b07948d2633bd72e7bb136b2303219e6821ae131f394b2a18b1856ee6053a82b50b9e7763a045ce9cb4b18141d4b471fc924d9fce8fab55f849b453ca4de23e2cf9dab01cd597ff2b777b5280dc741c8974adae5674716c87a6544a691dda995391e281ad9bfb4f6769d9dea15f75dddd79d165d65797699d9794475b407a6795277d433741b6850c54323da11ce246dfea85c0b8e40c045eed0f60571682b08cde5d5a2c84b2abe5b980a35260af2cdf9c1b81f8176f3c8ffd611dcc09f3ffd0178340daf6be648d726188008f1b0a63090fc2af093ad9b0e860709a43af788596649bef592dacf9210a3e20aba942e0383c58cdec5dfca2594e8247e2cbb662e42306e1e4c45ac5acfedd72bb5968d5b4b248cc135578b9f6db491eb5a671d094321aa62e7a4197bece6970b209c163c96b7db18305275504dac7112b1b230f3ca6e69066eef6a188818080b855e04f5dbcf7c2d8b114f8947e0fa17bad9d3026a24328c124ef7f9cd990d0b53fe1d09b139ed3a0edf26172e8a90c74f956b6461e17be186bd74c31b0b3e244e19c860cb9134c138f3ac723ac3139d7f568d8d5ef01b479a4c8cb9ef03760f81fa24c97741561767a896ec96308157f31b099defd8aca974309832a9dc3e2bb3ee594c9f222d03f01ea52d567e4471fe083bef607b31a84c5f2c70bcb9fb0f37018ebfccc8720ef17b7a7961d7f5bbcbb1f83e03fa2120628947aaaf662b215598b74c9cf2807ec226de7ed5da07685122e866c0e9e282f9250a2fd65a5d23d2140b46bd6db085697ff655a7ddb719f36b7fef8ddb54032b7aa5a81b401418257b5af55e9d7de0602f3b8d55b0f1fb35fa3b2dc13fdf443882d982eeeaf1266776b381bc9b4cca80bd0dec03270063248165a11db1150ee0fe3c16fb4a8e17f45081a0ef929d2691dfab92b7604e07f7099e38b55ef96f19d98de4bf952e05e47f6366b0efde8c8b765b18d0c961536b62c1e082d90415f69f2c99953015221e0ed1b05ebe82e5e1e1a221f24e4a6b0980cb177ca17bf8c92eab852931400cb1737719a7829c558cad38b2a36968c076e99df540b12bb24094f422eff8e81d1ac890b76bef2518cbb1422860aca02833db4665377e288eb548c2d9f4790c16af73ede7cf738b3fdb25ae96dc63bd9f347050f2de7915dcca997a6b030a94091c0c0381b30991607d493848b990c2ff2342d98b2d4ac6911ee7ac092f26580a7601b467216e1b67c709bf59479e7216e3c4f093161da713b2465743f089f1220c731b894ba1df7f9254bd8d5258b08c46ffd9be651da8440debc5aa9b1d170c0584267d92687dd7e9b591c7a46ec4d64bfaddd8345e2eb79364acf3e826512f24ce502c7c6ac57cbb86a582a7f2e9886b018301a09f14dcd3a05791385a6c1c711eacf965986e35b8e3f39cacb0db152e3d8ae4e1ef0c0bbf8fb3d47e11c30dcbb889bb99d7868ff6bc648fc024f6047fefcb2414911402fcec2e0cda24eb1b6340dbe07ce84276d5c03bc5c2e448a02585b3e62357f349e92c692a99b65f1340c2142e7b2407d28bc18b39104e16bc512953026745e945d944b165b996e414ea177bb71bbc5e5d35c3fca306d36be8284ee198125f00f30bad8a4727d89c0fae91e2637e23cfa7a6e1e1fa93c20080818eebbe9c41df207cb2009628683425c9b989b5d3bfdb3235c29fabeb1eedf63163a0d7f460e32c8481cfb215ee6f18cc3c175f676499c3ea999e67cdd689f8bec0add557dadff83647237a1fa0f62674d490c732db278347dd0fe19dd0da97174b81adeceff1b77dc3714e9547b30024d3c2a2270e83035fa83c2dd7ad6e710f96062b1774e96e5ffa7b82fbc45b0df59f396c80feaec4b5b05e3c19cfb1580c98c1fedb281901c7865bf0eb8f3e21782d72ca44cf6ca2ed9a03b900fe2d3012908456f286ab2bb85f814e287ef5188ae9a7da8f04844d270dfe9c3a16cae10d4674345a3c772cfb0868698481fa27de21681903aafe7fc6ab83b0a9013f1aafe07507bb2c98d6866a14d7ee14e52e7b86823895bce7f97773e11ec8b57b38f495bc680675c7008f3f0538c54d951442f83a1221b16cbac368730167956913d3168ce28634f2b9e304f4c23607e8133c390cfc2220bb35f9b4b64875524ad3a1d98390cf15b6cac43b6edea3857d12ee6eb933153efc1069454ead3c8acccb8cf91c8accd995ebb1f400a28e3dfb1c2f5d8574cb256b73a92928e921090e6a08be65d0578503c45f5aa44ece61a104f1d42b58f241bad37cdfe57a472f2a90db3a675ec5b7ef42aa95481f6b677e29ff21cdd40a984ba17fbc784ac3498583d20e445e49ce145ae1204f4f9f25f607a3b1bc8d843ba7b41032ca50c2a93bcaefa5bb36b8e55ab2e322a6b07eb24010fc8dbec27f5d98f816c4264e6181f99a0f99ec032383ffd0fd51e0aeef73e810c8228a184c2139ec38ac89bf443083295001d050cd07d29a2669bb0e51fbd1";

bytes constant PROOF =
    hex"000000000000000000000000000000000000000000b13cd2babeb1f7b1a0d084000000000000000000000000000000000000000000953e643efeb0b1f90aa4c50000000000000000000000000000000000000000000008eb82e87f80210658e90000000000000000000000000000000000000000004904201fd21768a88f32c6000000000000000000000000000000000000000000851d2078b2c8b408acff880000000000000000000000000000000000000000000000660e213bc9866d280e00000000000000000000000000000000000000000044a13e503c5531ce56d5fe0000000000000000000000000000000000000000000cd4c5f68b1cf49766da6f000000000000000000000000000000000000000000001c16afc64b3aab1faf9a00000000000000000000000000000000000000000087863dc63abb4105d7696300000000000000000000000000000000000000000057beb4bb33c27f4637485800000000000000000000000000000000000000000000209d3f1668d3db6bc60a0000000000000000000000000000000077387e48d3945f0c90f57fbae959280e0000000000000000000000000000000069345d5ab4dce253453ef640c9b0b0db10f1c1cf9875dbb63dedf4ce4b90cd0436c43292a38c826cd21ca5ac0ec475770d5dcf3cbdb64a425ac4d8292cfc111e602a4218c68ba392dd36310d4ba7083018c0fdf46d661b38a3f80a4a35a947e8f67bc34eb6f2928852ee30c97bcc87332b00ed07ad7fc47ab272aa9aa531cc6b8a30ed2e6a69e94ad0fd6ee1562643a5278d5530486b833675e696453de6f915eb1599d61cc7aa506a8bf8ff55c757a62a0ecfbda6225eab5fcb97389b72169275611da952ed4c007b1375f5b3573bd8162663d50d87ce7397911bbe505df5beb54a11d2daefe33d6182058f75a605b5139c940a66130536a6584a5642971e7173789dd2f31df6e83b31121528e6188515edf9315234ce2764fec275ca83cfd8f1f011b412d8ca5fb19b7eb3dc7add9f28db1b327b5020b0aee455c0a9941aca24a52e1dc93e3c98cf3b8b0df9b73d0a09af26b445a1bd5650942da5afab3fa5a09bd92c89184aff9d90496d79a89c391dbf19a5ebb1a80177a2674960703adb9eb9e3fc546f316555a0d316aea1446d243a9ddf2a964a99bf97a4070935a3cd84679c05ef4575c7496e23a6512fcc7f162594980c8d30f0d92a36fe7f7786d4760bc24fbc30fc72b11abf495163fdbd19886c546e4049640773deb5539fc5ddc48ef2356bfc5aaafb7dfbba8a9768c417e54910b2cb9d49fc0c29d342421dab853bc237f98c01edb2adfdcd4eef483f205ffb648dd1cd00ae333c51e3b5323b2258895aadb78e67710726b2b0f367bc1d952bbe41a4ad6d02b2cca781e90084d20790077c26cfb6a7e3ce1e414cb9de0daff83d54b009cb36b4d1054feb727eaa45b4c834f83f551d3e3a77c007d6240adf137d1746e91e9c6e61ac7e439e1fd4692d3a9073f125ed1bb067b66978ac2c57ec8d0c071405ad6c6a247c28b7da7563d436ba37978bd674dd0eccbe245e035207ad0faf2ee5c058a550d996e373ec6a33c31bca49478c46279fe2fd7b5b23ed0b44494468190650f63bd76965dcb4d3bc20e2896af633075ffa8df4c65f156689ce5727ad891dd8ed1a5d87de8efaa8caf881fd5fcaaab714f14c68902a0aeb0a25378c998ec43812c6aa5ce7c393ee1c731bf55611a4e79fba269fd53e09699b8c41eac5060069c87bf8fa52f72af1f6d04de902ca7059616b47512c75022efbd41ac4a1bf0a5a38da199c74610f0de8fba16ac35e6915efeac83d65420b6889e08fba8a0c49f68047b562702b24a3d029302325bd5f6d4bf58ce82ae108cc5a9a39b8939b53cf6ccaed23115c758c010c0faa0bf2db217bf8b539091f3054564fe2f6e98f4e246dca8e96625cacb00b4a3aa9f49436c4db4693958ec927af349e4c066cfbe2b3105870245128206e5f120a76b2b9b0b6c68c8c288722041a7d1901262b8c5d68393935ac6d2e3b4697ab6794d2ff53299318c0b053732014d6754f9e0d302b4bfdf527e2db76464e0ba2cb3e32ed37ba91c47d75a0ff088b5c6f9ff06a05ad1a225a09047bc694d64b64f31bab44071c3ef68f8e0a4b1fd693e53fd8d6a59af7735f28e23828aa1c1a9aa4b861638af221d2f2d22e25117be216d9ad284c5b0a5254ab5241bd93031f16df9fe6c38305e717785ff75b10d0c34d5e0a701f4e144ede4b303a09aa03cf7bad06900a61ab727cd1d14e882993de0eeebf2cf346adf4f6120edf1384f9750d0c385de4e84f49d1528f700625025b942b73fb17d8b9f06a87295415ab54c805bd81459bf7adec7a52afe81e26f661a16d282373283ff80a150c008ecd0c32ed352b94afd1044e24cc1c662d200b5bf78c039aa2a0cd5bc7b4eabd9369170d51349eece73b0d9c8b6887e5512d1b05b41167b5f6efe0d390a7713425c10b390f531ad00cea24b21c1eb97a24156c00c711e99f04f1e53c49a449508034b55ab658407005826f11f186b0beaf267b6e822d200b1e3ab90ab21e9e30ce1da0a8c5f0a59139afb6118ec8064c38286cf5887074f4489bcb8d8d97bf5dc37cb1e7387b2f377f7d48b375c96fdf9f2dedd6fc6dcbf82170612f6099858b8c889f797b0f526d21fae0a0f1f0f9a66d1a605d8bfd08043f815a5be2cd205001e0f408a780f2f0dd6ff353ade202191a0c1848d8da43431e51db30d18962c631c2a13a32290f1361a7c76806c18aac940f6820ba865c14c14a923d487306a426459a46ab4fec70c7c9f8ad47541319d10e3fe48bb36f0e3c1414b754ee8ddcd7c77e397744d4cbb352bc6642f641a0262b7f94dcd0a50b30f56f8b6356ca2fb2dc7bd23926777c79673d2298aa06ab7b11b8463d29523eaae2916d356c9ab940c39a2d918eb24ba5beff38dc759d40ae15efb5463a185766574ca96e10aad13add031787f1bad9981f176dcb6826a3451a7713a030fd60b3095334d3f7bfc6af0ff58583b782860e6422e6b026959c2410ee8c52b72e6137b1c5cbe924eedb7efffa8f58c6a018ff6172b6f77362907a0ce3e7c10d7b2b9d57d31433be87771693bce94692a30425e26c281a729f47e911ec922986302a7aa5b18d1d475698bf8edc6cb655e496e04c9139ea5955d2982a9f4722a7aa7b1fbc624ea87f6afcd91615145f5a085b6bd1d08f71d1158073292c704940afff69973e6c36137794af02c1397bc2060f3dc4de593f0a74b39007b87d48024bcdeccbf087fffa534d832c48ab074b010eaf5c233a16a09274e10bd0b73184c319f4e921a8c2c2f0293bb565ad16b8ca9887c345b331e0c2ced31bfca6beba567f602ef32beb482c4398807de5f79e4c8518b973ac6566f374e203070304f4800ef74aaaec1371286b35991a9eb3c67203f57279a0eb0ba3f46c0917d41c8efb96060e9b5f8441da6cd54238e5b3f990155fe69a6f7ffdb5368d2854fd0912e696b897201cdb78bf861653668adbcdd1eb947d0e2308c4c13dd70c8c3dca8950df008b98337d2a604c0922303174141619be11dd8f0e8a53ec8301f852c57787154ccab77437b5567e2b062164eb37067f77254281694f8b33191ff24d261664cc2cf97f1e2368a79847c4057f350f3d5d1bc642494b609ba1620d64c6df3d1192dc495d42bf4641bc4115118fb3522aa7b0669bb0780a5497f12fd2e02877e083d743909e7fbe3836e84ad4f9c3d65f2618418143c27f0cdea6113fe1e2f39814472772e12e95025ecef7cbcaefe0c5e75d9b005da91dbb04300f18cb2c228f8b4e986b6140fcabef88ea530d98a963d7fbf5eb9b9bd7ce7296260851281b71a830d6432263772163e9c0ae826ec74d8239a102136c2fe189d6205b095ad05b5457974172dccad70acad5fe2cdfc22b5d295a7fdf625bf9d1d20155e35510ad41fcf5a3dc2ad4c94f828b7abe3a851036b0d662a1466a9aab8c09f0bd395fe53b23ad9071ac65741c3ceb7d91505ffad0e16865db84ab0c52d725b718157287d368a59cf18bd931f6a34dcce485cdee91f9cfb72f4cab649def095289729e4425f4e873d9c37a85d81937fcadb3feb5b298aa551f020cd252ef0b00c6cf2377881def51c743db676306f5ca529b6ff8afe4e3c5f07d6047abc4044744d160067449d613f8f6676d7e14b2301a6dc3ffc3e3774a0abf3782ff6f194cc2e89bc8ebd6a9adccedabd60bb92cb56d1189ec11627e93792757af3bfa0dfce351a98fe7657211f1f22a7ca4360cc23f2f3dd494e26baa40a7cbb569f51f45c544d9eaa2881ebe46713ad0ea0f87f44b53cc517b1de8722d7a4d2607c92bcbada240e7fbda8f451a74795ddcc7757a9b0d8918311ab0048430e5493d460aac5aa9c4614c60cbbedcee09f3de8224108a85ff4d2a1ed8c71b63a1a324240fb80d38c350baa4a36845b7777c406672d6eed3f0ba9f72c80975bb88b581b51d0f05a6d5da5e7c7aea585229a70be414ee2311d705928590035d7baaf257000d3cf238ec502b2863d8b824114d06a254dd4af98416b2a7b040469292a5297a0feda609245f8d0b4b5610dc42d07bf977d84c00bac3a9009669fff9df11ddc826a3e79ed5e8f2832d45e2996ea221c96237a52bad4855b41e18dd78dbd32f340c1a0650546dc3a98dd9878d5c20295af447f7b4574fcaea24c30849dea14a6c24610a407d938ad1eb5a5f59ae33a15df86d613f4f0ef4147d2745b20648dde70cb08d673ea36ab0a50c1d76dc94a5d3853f3eb318bc6588efb4488e1ca60ffd04a03e211f7195786f49bd6362255dc6f921bceaae1843a01281f762d8b087702aa327dc5b9a685bfde0c078d81e177b481ed54dd566aefd30a8b177a1d6aa6d1726f5f43253a68c9af82a9671d4059ccd23e5de934b84ef588e9fa4fd70ad4705a8e9c802903f6a10b9870378a332cca76e521080015c4f84badc69a861356900ed9098c9f5f79866355b0ac6e8e9d174248e785d72a4cff7afc42fecfb21622be9a05fe3456b9d54da4524cc2619599f3b6e554d6a89c0de6e33aa6b8b71112ec1e58dc63e396c2110f2972d1367f0e66abd828fed393269aa71d9ae0a3d7d01df0c83e65846b9d0c39261529939583416550d5bc10b7fb2f7e816a4346cc521b472caba2004681ba052968dd3d3c10ee94d6eed03685eb361bc7ce22b66be245a6ce0e1b31a5ca6230e9adc3e4ffc8e3074c5df9cc4043d7a360c65cd4ced2ffdcac1293f3de2e7f3cec7f13f3f65012786939a7c0202d35fb3cd277cc0312314f15cf211ee865946d25eedce3e7aba92bc829f5a338942442a2836b8b2761398167eb10281a17cdb41f1006b9b0e323eeb4eb154628c9aa8b379837c56b8153139086a2650bb5bd20a17a6d4b5ff87aefa8ad338dff83e81cf0ca4bfb86025f7ba17d90231e6f4e0b394d9de68fb25d775d779b8f4749d604370e73b344a03707ce502c3dd29e2fe452c97d07b7e887a6b839a68fefaeefa0b58950fc236035bc965d9f4fa725c7abc0584863c25055f493f07f5bc59f85df975462708482eeb3066f100deabb7eb96be060285fcbe51f4975b6daaa868080b8437934cd00faef3fce521a1bb37d2886769b35b484a2a151dbfe3445a4be68500174af7e3275fb6b070397930b9fd114b093c55a956b43c071fc8a1790c021ff442a467a9262ffdcdce565798dae525d59192e22a3ec97121144c81c5c862bd4ca8c8c9b9271249a2e290a09bcd3afc12efbde15946dbd2fe520853a09da7a71cb29be7e00d5ba10c7bbecfcae3f8912cd1d5ca10d0f1afb13cb49232755c3e0644af22ad01eb801c1308e72355a5ba4bec7b5fb3a541e65323db372dd7a91233e3f770373055e0fb34df6f97e68a0d68ddb8f5236aab84313b1dbe918ceeb218139cab07251094b4df86e691bdd8a6d3eddc06e413444b864314004f4b4e22cec91c36a42cc8c2bc90570b2d85b6a84955d7b8a0ce66098f6adf3da3c7100615fdba8b4800a07c04ab4274283a7e31af75bcf8d658c57af6ff532afdfef8b07106761b730f5f7c120893a1a495b5496ff282dced0df5032eead0a082e07248fdf4617f7317430c94cc7a44566872e50711043d11a2b6895a3be4a231b86c1444fac42a3b233502b07560f8446d6fc957d389fee04ba5803fdcf01d08b2102c046c9f77f3213bcb036f93a7f4ba180842ac05b411ee4f37cfcb6fee882386f4fbc881bbfe1719f24c48147b432369cb45c7cbafb3e89e93f404ea65b41ad500057aec9c2d201eb26b87e43e6a28533d1cac1f0ee69bb5e4744692df7111aa611a60b768c501284a09174aff4d8325fd6fb7a0e54b35d5364c56d5830a1c4241c04116f2a428578fa98b34a1927c8cac450c95f45e4dd1d98c039ef5ef4b52e2d1df5006ef1bc558d15868075c916bba91b299a59dc2f722df3ccf0fc4bd842a91a9dc7122052b25fcbac90c9e18552ecc6284e9a64060a18ecb4a495bc9116bf028f8c4b609952839be06eb08302df3615459bc59af336c813240c91e87bf244400414a2a12109a83fb342a0ef6a391c098ad7d6c9795cd896b6b0832addf9d971fb84b0f2452dc0d5bb215bbd3fa1dbaf8192a8eacf9c84f3245ea9af61c2e635e42872d0f2b1a765003c8473dbec221f75bbcffb15e108dbf3e75f7a6cebfaef3b6c7f107718c827e12fa05929b4d881aa6b5ebab136f27cb66d0730d5af422840ad60a062b24979cc3af7863262e15568053f4e37b58ddf06ec7e41e75701c4c3b1ff417e4913bf0389125da3ef6ff1b765b0ea37def385de5f37a67831f5011a2788717955a9a0e9fdf91e9982ea71561f1df660d0eed47d42c3e6f67305fd595e1351f101898c9355584f20b1e33b77311745679a3e40bcdc210966e75291ddd0633166f6bad3911c2e7d5784e5dd202443f67ebb4669ebac68aed11d01044044d342aa855ed7a4c561ef91277adc39e69a82697fe79ce05454da7340b4f783170bb1ca364bd3096c49da7f05512b9e021c1ede71848b0d593a813915db8e10d280105663055e884b4717b4006a5cb4ac6f989ebfe1a1e300d19670c169408c5269c0080945b5a4b30087f7aa62a6f01ae07a06ace96f7e10bb5d45428482812642b040bbb72e5bb79856c6f4672acf451aaed18c6ff8d73c506c9e88e90d4ceb4f4069d7d3a280e3f8316ca2278fc6df741c1d63e50aad0a90c9f3761f2400a159c27cd003d0e9ecde653eabb3fbbc6800a9ab679d60d6f52bb0eba0855665979c502794b2fc588081b10f14deadea5632f1872848c6aaeb9973b754192ae3147801d6e9afe43717309e31841e598f67628280103256c7a214de3bbd88ec85749bb1cb7cc75822170298809548269a1ee793073f677e8f2afee7b402b4fd5928bef12eefc42e3ebd07fac70b5ddfce5752b74ce9ec8cc12055aef025d9166b107091b8967b38b7f2bbcb90ee93a27dc7415de60ad74946180516d9b30e58c28340c0047429a4aa10c38b34a42b0faac8e519172db8e0e87808f08a8988feab5222f0161a1be888ddcdf46076cc4d410d43c5430ffc25e828a4855a6d7bb8168fa022ad72e09a72af5337a7fe7035f1ef2000fed73b8908f038eea33dda006ee107b200d9367ccc3dde092c865f5ce8dbb57ba9fe4dca7ff7d960a0f4a2378ecdfa52bfd1c08698f59ae28f2c75309fe991cd11f339c96adfce18d94af45e1434d0726909674b7fc554e5ba512da7c6dd5105f415d9ac3247419c1e52e09a6fd3fa209bfe710642c3118f772f44d77e3681d35d77e267a8eab74f0c1338e3139ca5020768f9ae69216887f751ba116b18eeec55cf477cc4135f1c83c9b0b8c8196f426d97213a6d0d5119e94af10a658b10548430e7519cd91cad997508b427873f02807126e29c2d4936e0330cf4321211d48f8abb4c489c05f6c0e78def4b49c802e2664b2be1f8dc1a15d645cae20ae56a0677502e50b8d84b1a52771ed2f648306d08bb9b64ff522de9ef7af9b46261eb428030b77d015271bff3fd3bbcaea8a280d7b99ca2a99297a66fe05098d1c6c15e7f1ca2a37354cb87dec9480c10cde207f9710bd9342175a8a66cbae1155f99045e7a90454d95ce6d71f19dd0a16fa0f919cc85ab9ec49f7b4340d530080fa745dc0884d83d6718caf702c0bb576cd040102e25e969324dce9beb29e030793c8253e91aabc8a6696bf5fe7e8c3b5eb2bbc7ba1fd5d8d2e045b1ea2202bff96c478ae7dcc0b2f43aebe2afb8cdd306c0d2112c326d2f42511a664529bd99f5d5bed8b1de026b117a64112cb0cdb83dd1d7cb816b6171948896962f231a0f12fa3ac95c1c6ae4c57bebb0c514ab45ea327e10cca1e32677adb0af15a229672cbcf92ee0bfa66b42b8539f0e042b16803126f99a2bcc77afcdbb8009920eecfd01084e62032912309a4bf0ec8069dc3d11fab2d179849cc9a0a41d940fef232543cb445e97928dd0e8e20e39644b09b1d0845dc17e8e014f87bab3cffdd94f5d6e4d6ba3034aef9b2e4e6b18be665938d047a94fb1d51b58ef534db56b5253806e72aaf3df780ffaa8c665475f3ed3e3c0ed0eab68a1551c820dae0bfe68670b2c99bcc969ffe6c10dd5673fc5a5857d527f0992eb8fbce10c01539a21f937dc08612ff098a904ed15add74375a34238103269bcbb45ab009ae7b80d9ba78a38f66d1c2f94b59feb1d9b2c46f65091ee125bc06646b5ebacc2d4a1f8d73ea164769b91981b14bb768fb5846637a43d3341ad545a439b28a71ac95227d22bcc8c74dcad253f541b9b8a39f1a430eb6bf0413bfaa3904ebc252cbbd46bac2c0cbcc906b7157e7837af36ff5693a0575fc9020428fe90cb5faf0992dce0b205c46d01ce545fd4918392f7ed37458e2a4000427c1033b709a2d9cfea6aa570099cbe589be00b8b254065ab849262f514f251601eed84a1bcd823a9ec1808a24edee0d23c679cd708221cd3f327155afb6163c181e9b67f5f444607365dc5945636f9bdeba40fbe9ad0ddf938eceed92fe79fa093c9a63230c829a4ed4ab633f32ec4d8ba2aea59ed5112fd7963926bf3889432b40552be8d8f205b096dd4ba0ebf211bc9b513bb0da9639cc758548f7e8c6ee188793275cf7cb01b942fd7d5d38feeedceadeac99b116064aa8d875fd4f54d228dc2cd048f8a4603587bf6359b61a8fd1e3aff042e56b8bdd5b8dcab475f8cb076d922ca86f16c3393a9492ce5f4d21021778f98ff3acaec3c96491204d3d112526686ab4aa3cb0ed4b30295749da04d7ad700b5ade1f74a6d8dd95e59c6742303bf612ca2522a63d6e25beb906f4521c7ffe23b12f4d53bacc4151f79e73761590b66b9c169e98b469d542a504bb7633fd63e33705ebb77bb4322385950bcf114cebed6469656567409cae84d30d149f4bbeae48597be5736f9ce974b549fe2786f150b898e51a7372a806975991435678e896ad871551fa44fc79c921b24312ead7ba08f16bd50056c496b4c7ed961d328e3105857059f2896056eda62d5424c5ea709e2ba80b6699ae7952a2dd35f5818a80c9c142a9d0c3b78c0b259b8b03bc807054aa187a96fb21e0944bf555b8ff919ef22f6b15441e778722bf327e16270a812a506a1f01cf9a1ca3ee0364133ead37dba1a214933a6beb71425de2011943a59b163388045bd4cf0a08524ef3919b1ba5c1a1bb03bba35f0c37b07e1c58485d6974f0d3d54c2c61e2ab8406029a51b774141666abd70adc85741cd0";
